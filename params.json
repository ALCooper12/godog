{"name":"Godog","tagline":"Cucumber like BDD framework for GO","body":"[![Build Status](https://travis-ci.org/DATA-DOG/godog.svg?branch=master)](https://travis-ci.org/DATA-DOG/godog)\r\n[![GoDoc](https://godoc.org/github.com/DATA-DOG/godog?status.svg)](https://godoc.org/github.com/DATA-DOG/godog)\r\n\r\n# Godog\r\n\r\n<p align=\"center\"><img src=\"https://raw.github.com/DATA-DOG/godog/master/logo.png\" alt=\"Godog logo\" style=\"width:250px;\" /></p>\r\n\r\n**The API is likely to change a few times before we reach 1.0.0**\r\n\r\n**Godog** is an open source behavior-driven development framework for [go][golang] programming language.\r\nWhat is behavior-driven development, you ask? It’s the idea that you start by writing human-readable sentences that\r\ndescribe a feature of your application and how it should work, and only then implement this behavior in software.\r\n\r\nThe project is inspired by [behat][behat] and [cucumber][cucumber] and is based on cucumber [gherkin3 parser][gherkin].\r\n\r\n**Godog** does not intervene with the standard **go test** command and it's behavior. You can leverage both frameworks\r\nto functionally test your application while maintaining all test related source code in **_test.go** files.\r\n\r\n**Godog** acts similar compared to **go test** command. It builds all package sources to a single main package file\r\nand replaces **main** func with it's own and runs the build to test described application behavior in feature files.\r\nProduction builds remain clean without any test related source code.\r\n\r\n### Install\r\n\r\n    go get github.com/DATA-DOG/godog/cmd/godog\r\n\r\n### Example\r\n\r\nThe following example can be [found here](https://github.com/DATA-DOG/godog/tree/master/examples/godogs).\r\n\r\n#### Step 1\r\n\r\nImagine we have a **godog cart** to serve godogs for dinner. At first, we describe our feature\r\nin plain text:\r\n\r\n``` gherkin\r\n# file: examples/godogs/godog.feature\r\nFeature: eat godogs\r\n  In order to be happy\r\n  As a hungry gopher\r\n  I need to be able to eat godogs\r\n\r\n  Scenario: Eat 5 out of 12\r\n    Given there are 12 godogs\r\n    When I eat 5\r\n    Then there should be 7 remaining\r\n```\r\n\r\nAs a developer, your work is done as soon as you’ve made the program behave as\r\ndescribed in the Scenario.\r\n\r\n#### Step 2\r\n\r\nIf you run `godog godog.feature` inside the **examples/godogs** directory.\r\nYou should see that the steps are undefined:\r\n\r\n![Screenshot](https://raw.github.com/DATA-DOG/godog/master/screenshots/undefined.png)\r\n\r\nIt gives you undefined step snippets to implement in your test context. You may copy these snippets\r\ninto your `*_test.go` file.\r\n\r\nNow if you run the tests again. You should see that the definition is now pending. You may change\r\n**ErrPending** to **nil** and the scenario will pass successfully.\r\n\r\nSince we need a working implementation, we may start by implementing only what is necessary.\r\n\r\n#### Step 3\r\n\r\nWe only need a number of **godogs** for now. Lets define steps.\r\n\r\n``` go\r\n/* file: examples/godogs/godog.go */\r\npackage main\r\n\r\n// Godogs to eat\r\nvar Godogs int\r\n\r\nfunc main() { /* usual main func */ }\r\n```\r\n\r\n#### Step 4\r\n\r\nNow lets finish our step implementations in order to test our feature requirements:\r\n\r\n``` go\r\n/* file: examples/godogs/godog_test.go */\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\t\"github.com/DATA-DOG/godog\"\r\n)\r\n\r\nfunc thereAreGodogs(available int) error {\r\n\tGodogs = available\r\n\treturn nil\r\n}\r\n\r\nfunc iEat(num int) error {\r\n\tif Godogs < num {\r\n\t\treturn fmt.Errorf(\"you cannot eat %d godogs, there are %d available\", num, Godogs)\r\n\t}\r\n\tGodogs -= num\r\n\treturn nil\r\n}\r\n\r\nfunc thereShouldBeRemaining(remaining int) error {\r\n\tif Godogs != remaining {\r\n\t\treturn fmt.Errorf(\"expected %d godogs to be remaining, but there is %d\", remaining, Godogs)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc featureContext(s *godog.Suite) {\r\n\ts.Step(`^there are (\\d+) godogs$`, thereAreGodogs)\r\n\ts.Step(`^I eat (\\d+)$`, iEat)\r\n\ts.Step(`^there should be (\\d+) remaining$`, thereShouldBeRemaining)\r\n\r\n\ts.BeforeScenario(func(interface{}) {\r\n\t\tGodogs = 0 // clean the state before every scenario\r\n\t})\r\n}\r\n```\r\n\r\nNow when you run the `godog godog.feature` again, you should see:\r\n\r\n![Screenshot](https://raw.github.com/DATA-DOG/godog/master/screenshots/passed.png)\r\n\r\n**Note:** we have hooked to **BeforeScenario** event in order to reset state. You may hook into\r\nmore events, like **AfterStep** to test against an error and print more details about the error\r\nor state before failure. Or **BeforeSuite** to prepare a database.\r\n\r\n### Documentation\r\n\r\nSee [godoc][godoc] for general API details.\r\nSee **.travis.yml** for supported **go** versions.\r\nSee `godog -h` for general command options.\r\n\r\nSee implementation examples:\r\n\r\n- [rest API server](https://github.com/DATA-DOG/godog/tree/master/examples/api)\r\n- [godogs](https://github.com/DATA-DOG/godog/tree/master/examples/godogs)\r\n\r\n### Changes\r\n\r\n**2015-07-03**\r\n- changed **godog.Suite** from interface to struct. Context registration should be updated accordingly. The reason\r\nfor change: since it exports the same methods and there is no need to mock a function in tests, there is no\r\nobvious reason to keep an interface.\r\n- in order to support running suite concurrently, needed to refactor an entry point of application. The **Run** method\r\nnow is a func of godog package which initializes and run the suite (or more suites). Method **New** is removed. This\r\nchange made godog a little cleaner.\r\n- renamed **RegisterFormatter** func to **Format** to be more consistent.\r\n\r\n### FAQ\r\n\r\n**Q:** Where can I configure common options globally?\r\n**A:** You can't. Alias your common or project based commands: `alias godog-wip=\"godog --format=progress --tags=@wip\"`\r\n\r\n### Contributions\r\n\r\nFeel free to open a pull request. Note, if you wish to contribute an extension to public (exported methods or types) -\r\nplease open an issue before to discuss whether these changes can be accepted. All backward incompatible changes are\r\nand will be treated cautiously.\r\n\r\n### License\r\n\r\nAll package dependencies are **MIT** or **BSD** licensed.\r\n\r\n**Godog** is licensed under the [three clause BSD license][license]\r\n\r\n[godoc]: http://godoc.org/github.com/DATA-DOG/godog \"Documentation on godoc\"\r\n[golang]: https://golang.org/  \"GO programming language\"\r\n[behat]: http://docs.behat.org/ \"Behavior driven development framework for PHP\"\r\n[cucumber]: https://cucumber.io/ \"Behavior driven development framework for Ruby\"\r\n[gherkin]: https://github.com/cucumber/gherkin-go \"Gherkin3 parser for GO\"\r\n[license]: http://en.wikipedia.org/wiki/BSD_licenses \"The three clause BSD license\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}